// Code generated by MockGen. DO NOT EDIT.
// Source: internal/ingest/ingest.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	relay "github.com/zhukov-alex/eventrelay/internal/relay"
)

// MockIngest is a mock of Ingest interface.
type MockIngest struct {
	ctrl     *gomock.Controller
	recorder *MockIngestMockRecorder
}

// MockIngestMockRecorder is the mock recorder for MockIngest.
type MockIngestMockRecorder struct {
	mock *MockIngest
}

// NewMockIngest creates a new mock instance.
func NewMockIngest(ctrl *gomock.Controller) *MockIngest {
	mock := &MockIngest{ctrl: ctrl}
	mock.recorder = &MockIngestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIngest) EXPECT() *MockIngestMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIngest) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIngestMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIngest)(nil).Close), ctx)
}

// Serve mocks base method.
func (m *MockIngest) Serve(ctx context.Context, repl relay.Service) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Serve", ctx, repl)
	ret0, _ := ret[0].(error)
	return ret0
}

// Serve indicates an expected call of Serve.
func (mr *MockIngestMockRecorder) Serve(ctx, repl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serve", reflect.TypeOf((*MockIngest)(nil).Serve), ctx, repl)
}
