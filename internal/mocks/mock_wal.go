// Code generated by MockGen. DO NOT EDIT.
// Source: internal/wal/wal_writer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWalWriter is a mock of WalWriter interface.
type MockWalWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWalWriterMockRecorder
}

// MockWalWriterMockRecorder is the mock recorder for MockWalWriter.
type MockWalWriterMockRecorder struct {
	mock *MockWalWriter
}

// NewMockWalWriter creates a new mock instance.
func NewMockWalWriter(ctrl *gomock.Controller) *MockWalWriter {
	mock := &MockWalWriter{ctrl: ctrl}
	mock.recorder = &MockWalWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalWriter) EXPECT() *MockWalWriterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockWalWriter) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockWalWriterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWalWriter)(nil).Close))
}

// Flush mocks base method.
func (m *MockWalWriter) Flush() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush")
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockWalWriterMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockWalWriter)(nil).Flush))
}

// Open mocks base method.
func (m *MockWalWriter) Open(filename string, offset int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", filename, offset)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *MockWalWriterMockRecorder) Open(filename, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockWalWriter)(nil).Open), filename, offset)
}

// Seek mocks base method.
func (m *MockWalWriter) Seek(offset int64, whence int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seek", offset, whence)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seek indicates an expected call of Seek.
func (mr *MockWalWriterMockRecorder) Seek(offset, whence interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockWalWriter)(nil).Seek), offset, whence)
}

// Write mocks base method.
func (m *MockWalWriter) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockWalWriterMockRecorder) Write(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockWalWriter)(nil).Write), p)
}
